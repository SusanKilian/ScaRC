# Makefile for Fire Dynamics Simulator (FDS)

# To use this makefile, select the appropriate compiler and OS from the list below. For example, to
# compile the 64 bit parallel version (MPI) of FDS under Linux using the Intel compilers type:
#
# make mpi_intel_linux_64

# A make utility for windows may be downloaded from http://gnuwin32.sourceforge.net/packages/make.htm

# The variable VPATH defines where the source code is relative to the current directory

VPATH = ../Source


# -----------------------------------------------------------------------------------------------------------------------
# Directives and Options
# -----------------------------------------------------------------------------------------------------------------------
ifeq ($(shell echo "check_quotes"),"check_quotes")
# windows
  GIT_HASH := $(shell ..\Scripts\githash)
  GIT_STAT := $(shell ..\Scripts\gitstat)
  GIT_DATE := $(shell ..\Scripts\gitlog)
  GIT_BRANCH := $(shell ..\Scripts\gitbranch)
  BUILD_DATE := $(shell date /t) $(shell time /t)
else
# linux/osx
  SHELL:=/bin/bash
  GIT_HASH := $(shell git describe --long)
  ifeq ("$(shell git diff --shortstat $(VPATH)/*.f90)","")
    GIT_STAT :=
  else
    GIT_STAT := -dirty
  endif
  GIT_DATE := $(shell git log -1 --format=%cd)
  GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
  BUILD_DATE := $(shell date "+%b %d, %Y  %T")
# The preprocessor used by xlf uses comma as separation between preprocessing commands.
# Commas needs to be escaped if they are to be used as part of a value in a preprocessing variable.
  BUILD_DATE_XLF := $(shell date "+%b %d\, %Y  %T")
endif

GITINFO_BASE=-DGITHASH_PP=\"$(GIT_HASH)$(GIT_STAT)-$(GIT_BRANCH)\" -DGITDATE_PP=\""$(GIT_DATE)\""
GITINFO=-fpp $(GITINFO_BASE) -DBUILDDATE_PP=\""$(BUILD_DATE)\""
GITINFOGNU=-cpp $(GITINFO_BASE) -DBUILDDATE_PP=\""$(BUILD_DATE)\""
GITINFOXLF=-qsuffix=cpp=f90 '-WF,-DGITHASH_PP=\"$(GIT_HASH)\",-DGITDATE_PP=\"$(GIT_DATE)\",-DBUILDDATE_PP=\"$(BUILD_DATE_XLF)\"'
GITINFOPGI=-Mpreprocess $(GITINFO_BASE) -DBUILDDATE_PP=\""$(BUILD_DATE)\""
GFORTRAN_OPTIONS=

ifeq ($(shell echo "check_quotes"),"check_quotes")
# windows
  INTELMPI_COMPVERSION := $(shell ..\Scripts\intel_compversion)
  GNU_COMPVERSION := $(shell ..\Scripts\gnu_compversion)
else
# linux/osx
  INTELMPI_COMPVERSION := $(shell ../Scripts/intelmpi_compversion.sh)
  INTELMAJOR_COMPVERSION := $(shell ../Scripts/intelmajor_compversion.sh)
  OPENMPI_COMPVERSION := $(shell ../Scripts/openmpi_compversion.sh)
  GNU_COMPVERSION := $(shell ../Scripts/gnu_compversion.sh)
  ifeq ($(shell ../Scripts/gnu_compmajorversion.sh),10)
    GFORTRAN_OPTIONS=-fallow-argument-mismatch
  endif
endif

INTELMPI_COMPINFO=-DCOMPVER_PP=\"$(INTELMPI_COMPVERSION)\"
OPENMPI_COMPINFO=-DCOMPVER_PP=\"$(OPENMPI_COMPVERSION)\"
GNU_COMPINFO=-DCOMPVER_PP=\"$(GNU_COMPVERSION)\"

FFLAGSMKL_INTEL =
LFLAGSMKL_INTEL =
FFLAGSMKL_OPENMPI =
LFLAGSMKL_OPENMPI =
FFLAGSMKL_CUSTOM =
LFLAGSMKL_CUSTOM =
ifdef MKLROOT # This assumes the MKL library is available.
ifeq ($(shell echo "check_quotes"),"check_quotes")
# windows
ifeq ($(shell ..\Scripts\havemkl),1)
# Use cluster_sparse_solver with intelmpi blacs
  FFLAGSMKL_INTEL = -DWITH_MKL /I"$(MKLROOT)"\include
  LFLAGSMKL_INTEL = "$(MKLROOT)"\lib\intel64\mkl_intel_lp64.lib "$(MKLROOT)"\lib\intel64\mkl_intel_thread.lib "$(MKLROOT)"\lib\intel64\mkl_core.lib "$(MKLROOT)"\lib\intel64\mkl_blacs_intelmpi_lp64.lib
endif
else
# linux/osx
ifneq ("$(wildcard ${MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a)","")
# Use cluster_sparse_solver with intelmpi blacs
  FFLAGSMKL_INTEL = -DWITH_MKL -I$(MKLROOT)/include
  LFLAGSMKL_INTEL = -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -lpthread -lm -ldl
endif
ifneq ("$(wildcard ${MKLROOT}/lib/intel64/libmkl_blacs_openmpi_lp64.a)","")
# Use cluster_sparse_solver with openmpi blacs
  FFLAGSMKL_OPENMPI = -DWITH_MKL -I$(MKLROOT)/include
  LFLAGSMKL_OPENMPI = -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_blacs_openmpi_lp64.a -Wl,--end-group -lpthread -lm -ldl
  FFLAGSMKL_GNU_OPENMPI = -DWITH_MKL -I$(MKLROOT)/include
  LFLAGSMKL_GNU_OPENMPI =  -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_gf_lp64.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_blacs_openmpi_lp64.a -Wl,--end-group -lgomp -lpthread -lm -ldl
endif
ifneq ("$(wildcard ${MKLROOT}/lib/libmkl_blacs_custom_lp64.a)","")
# Use cluster_sparse_solver with custom blacs
  FFLAGSMKL_CUSTOM = -DWITH_MKL -I$(MKLROOT)/include
  LFLAGSMKL_CUSTOM = ${MKLROOT}/lib/libmkl_intel_lp64.a ${MKLROOT}/lib/libmkl_core.a ${MKLROOT}/lib/libmkl_intel_thread.a ${MKLROOT}/lib/libmkl_blacs_custom_lp64.a -lpthread -lm -ldl
  FFLAGSMKL_GNU_CUSTOM = -DWITH_MKL -I$(MKLROOT)/include
  LFLAGSMKL_GNU_CUSTOM =  ${MKLROOT}/lib/libmkl_intel_lp64.a ${MKLROOT}/lib/libmkl_sequential.a ${MKLROOT}/lib/libmkl_core.a ${MKLROOT}/lib/libmkl_blacs_custom_lp64.a -lpthread -lm -ldl
endif
endif # OS test
endif # MKLROOT test

FFLAGS_SCARC_DB  = -DWITH_SCARC_VERBOSE -DWITH_SCARC_DEBUG

# -----------------------------------------------------------------------------------------------------------------------
# Objects to compile
# -----------------------------------------------------------------------------------------------------------------------

obj_scarc = scarc_constants.o scarc_types.o scarc_variables.o scarc_pointers.o scarc_messages.o scarc_errors.o scarc_utilities.o scarc_storage.o scarc_convergence.o scarc_timings.o scarc_stack.o scarc_setup.o scarc_mpi.o scarc_mkl.o scarc_vectors.o scarc_grids.o scarc_matrices.o scarc_fft.o scarc_gmg.o scarc_amg.o scarc_mgm.o scarc_methods.o scarc_solvers.o

obj_fds1 =  prec.o cons.o devc.o type.o data.o mesh.o func.o gsmv.o smvv.o rcal.o turb.o soot.o ieva.o pois.o evac.o geom.o
obj_fds2 =  radi.o part.o vege.o ctrl.o samr.o dump.o hvac.o mass.o read.o wall.o fire.o divg.o velo.o pres.o init.o main.o

obj_mpi  =  $(obj_fds1) scrc.o $(obj_fds2)
obj_all  =  $(obj_fds1) $(obj_scarc) $(obj_fds2)


# -----------------------------------------------------------------------------------------------------------------------
# General Purpose Rules
# -----------------------------------------------------------------------------------------------------------------------

no_target:
	@echo \******** You did not specify a make target \********
	@echo Please read the comments at the top of the makefile

setup:
%.o : %.mod

.SUFFIXES: .f90 .o .obj

.f90.o:
	$(FCOMPL) -c $(FFLAGS) $<
	 
# Files which have OpenMP compiler directives are compiled using the FOPENMPFLAG and can be enabled/disabled on a per-file basis.

divg.o: FFLAGS += $(FOPENMPFLAGS)
func.o: FFLAGS += $(FOPENMPFLAGS)
mass.o: FFLAGS += $(FOPENMPFLAGS)
pois.o: FFLAGS += $(FOPENMPFLAGS)
pres.o: FFLAGS += $(FOPENMPFLAGS)
turb.o: FFLAGS += $(FOPENMPFLAGS)
velo.o: FFLAGS += $(FOPENMPFLAGS)
radi.o: FFLAGS += $(FOPENMPFLAGS)
main.o: FFLAGS += $(FOPENMPFLAGS)

divg.obj: FFLAGS += $(FOPENMPFLAGS)
func.obj: FFLAGS += $(FOPENMPFLAGS)
mass.obj: FFLAGS += $(FOPENMPFLAGS)
pois.obj: FFLAGS += $(FOPENMPFLAGS)
pres.obj: FFLAGS += $(FOPENMPFLAGS)
turb.obj: FFLAGS += $(FOPENMPFLAGS)
velo.obj: FFLAGS += $(FOPENMPFLAGS)
radi.obj: FFLAGS += $(FOPENMPFLAGS)
main.obj: FFLAGS += $(FOPENMPFLAGS)


# -----------------------------------------------------------------------------------------------------------------------
# LINUX
# -----------------------------------------------------------------------------------------------------------------------

#
# Intel Compiler for 
#

impi_intel_linux_scarc : FFLAGS = -m64 -O2 -ipo -mt_mpi -traceback -no-wrap-margin $(GITINFO) $(INTELMPI_COMPINFO) $(FFLAGSMKL_INTEL)
impi_intel_linux_scarc : LFLAGSMKL = $(LFLAGSMKL_INTEL)
impi_intel_linux_scarc : LFLAGS = -static-intel
impi_intel_linux_scarc : FCOMPL = mpiifort
impi_intel_linux_scarc : FOPENMPFLAGS = -qopenmp -qopenmp-link static -liomp5
impi_intel_linux_scarc : obj = fds_impi_intel_linux_scarc
impi_intel_linux_scarc : setup $(obj_all)
	$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)


impi_intel_linux_scarc_db : FFLAGS = -m64 -mt_mpi -check all -warn all -O0 -auto -WB -traceback -g -fpe0 -fltconsistency -stand:f08 -no-wrap-margin $(GITINFO) $(INTELMPI_COMPINFO) $(FFLAGSMKL_INTEL) $(FFLAGS_SCARC_DB)
ifeq ($(shell expr $(INTELMAJOR_COMPVERSION) \> 19), 1)
impi_intel_linux_scarc_db : FFLAGS += -warn noexternals
endif
impi_intel_linux_scarc_db : LFLAGSMKL = $(LFLAGSMKL_INTEL)
impi_intel_linux_scarc_db : LFLAGS = -static-intel 
#impi_intel_linux_scarc_db : LFLAGS = -static-intel libscarc.a
impi_intel_linux_scarc_db : FCOMPL = mpiifort
impi_intel_linux_scarc_db : FOPENMPFLAGS = -qopenmp -qopenmp-link static -liomp5
impi_intel_linux_scarc_db : obj = fds_impi_intel_linux_scarc_db
impi_intel_linux_scarc_db : setup $(obj_all) 
#impi_intel_linux_scarc_db : setup $(obj_all) libscarc
	$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)
	#$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_fds1) $(obj_fds2) $(LFLAGSMKL)


#
# GNU Compiler
#

mpi_gnu_linux_scarc : FFLAGS = -m64 -O2 -std=f2008 -ffpe-summary=none -fall-intrinsics -frecursive $(GITINFOGNU) $(GNU_COMPINFO) $(FFLAGSMKL_GNU_OPENMPI) $(GFORTRAN_OPTIONS) 
mpi_gnu_linux_scarc : LFLAGSMKL = $(LFLAGSMKL_GNU_OPENMPI)
mpi_gnu_linux_scarc : FCOMPL = mpifort
mpi_gnu_linux_scarc : FOPENMPFLAGS = -fopenmp
mpi_gnu_linux_scarc : obj = fds_mpi_gnu_linux_scarc
mpi_gnu_linux_scarc : setup $(obj_all)
	$(FCOMPL) $(FFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)


mpi_gnu_linux_scarc_db : FFLAGS = -m64 -O0 -std=f2008 -ggdb -Wall -Wcharacter-truncation -Wno-target-lifetime -fcheck=all -fbacktrace -frecursive -ffpe-trap=invalid,zero,overflow -ffpe-summary=none -fall-intrinsics $(GITINFOGNU) $(GNU_COMPINFO) $(FFLAGSMKL_GNU_OPENMPI) $(GFORTRAN_OPTIONS) $(FFLAGS_SCARC_DB)
mpi_gnu_linux_scarc_db : LFLAGSMKL = $(LFLAGSMKL_GNU_OPENMPI)
#mpi_gnu_linux_scarc_db : LFLAGS = libscarc.a
mpi_gnu_linux_scarc_db : FCOMPL = mpifort
mpi_gnu_linux_scarc_db : FOPENMPFLAGS = -fopenmp
mpi_gnu_linux_scarc_db : obj = fds_mpi_gnu_linux_scarc_db
mpi_gnu_linux_scarc_db : setup $(obj_all)
#mpi_gnu_linux_scarc_db : setup $(obj_all) libscarc
	$(FCOMPL) $(FFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)
	#$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_fds1) $(obj_fds2) $(LFLAGSMKL)


# -----------------------------------------------------------------------------------------------------------------------
# Mac OSX
# -----------------------------------------------------------------------------------------------------------------------

#
# Intel Compiler 
#
mpi_intel_osx_scarc : FFLAGS = -m64 -O2 -ipo -no-wrap-margin $(GITINFO) $(OPENMPI_COMPINFO) $(FFLAGSMKL_CUSTOM) 
mpi_intel_osx_scarc : LFLAGSMKL = $(LFLAGSMKL_CUSTOM)
mpi_intel_osx_scarc : LFLAGS = -static-intel
mpi_intel_osx_scarc : FOPENMPFLAGS = -qopenmp -qopenmp-link static
mpi_intel_osx_scarc : FCOMPL = mpifort
mpi_intel_osx_scarc : obj = fds_mpi_intel_osx_scarc
mpi_intel_osx_scarc : setup $(obj_all)
	$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)


mpi_intel_osx_scarc_db : HERE=/Users/susannekilian/GIT/github/01_ScaRC/Build/mpi_intel_osx_scarc_db
mpi_intel_osx_scarc_db : FFLAGS = -m64 -check all -fp-stack-check -warn unused -O0 -auto -WB -traceback -ggdb -fpe0 -fltconsistency -stand:f08 -no-wrap-margin $(GITINFO) $(OPENMPI_COMPINFO) $(FFLAGSMKL_CUSTOM) -I$(HERE) $(FFLAGS_SCARC_DB)
mpi_intel_osx_scarc_db : LFLAGSMKL = $(LFLAGSMKL_CUSTOM) 
mpi_intel_osx_scarc_db : LFLAGS = -static-intel 
#mpi_intel_osx_scarc_db : LFLAGS = -static-intel libscarc.a
mpi_intel_osx_scarc_db : FOPENMPFLAGS = -qopenmp -qopenmp-link static
mpi_intel_osx_scarc_db : FCOMPL = mpifort
mpi_intel_osx_scarc_db : obj = fds_mpi_intel_osx_scarc_db
mpi_intel_osx_scarc_db : setup $(obj_all) 
#mpi_intel_osx_scarc_db : setup $(obj_all) libscarc
	$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)
	#$(FCOMPL) $(FFLAGS) $(LFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_fds1) $(obj_fds2) $(LFLAGSMKL)

#
# GNU Compiler 
#
mpi_gnu_osx_scarc : FFLAGS = -m64 -O2 -std=f2008 -ffpe-summary=none -fall-intrinsics -frecursive $(GITINFOGNU) $(GNU_COMPINFO) $(FFLAGSMKL_GNU_OPENMPI) $(GFORTRAN_OPTIONS) 
mpi_gnu_osx_scarc : LFLAGSMKL = $(LFLAGSMKL_GNU_OPENMPI)
mpi_gnu_osx_scarc : FCOMPL = mpifort
mpi_gnu_osx_scarc : FOPENMPFLAGS =
mpi_gnu_osx_scarc : obj = fds_mpi_gnu_osx_scarc
mpi_gnu_osx_scarc : setup $(obj_all)
	$(FCOMPL) $(FFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)


mpi_gnu_osx_scarc_db : FFLAGS = -m64 -O0 -std=f2008 -ggdb -Wall -Wcharacter-truncation -Wno-target-lifetime -fcheck=all -fbacktrace -frecursive -ffpe-trap=invalid,zero,overflow -ffpe-summary=none -fall-intrinsics $(GITINFOGNU) $(GNU_COMPINFO) $(FFLAGSMKL_GNU_OPENMPI) $(GFORTRAN_OPTIONS) $(FFLAGS_SCARC_DB)
#mpi_gnu_osx_scarc_db : LFLAGS = libscarc.o
mpi_gnu_osx_scarc_db : LFLAGSMKL = $(LFLAGSMKL_GNU_OPENMPI)
mpi_gnu_osx_scarc_db : FCOMPL = mpifort
mpi_gnu_osx_scarc_db : FOPENMPFLAGS =
mpi_gnu_osx_scarc_db : obj = fds_mpi_gnu_osx_scarc_db
mpi_gnu_osx_scarc_db : setup $(obj_all)
#mpi_gnu_osx_scarc_db : setup $(obj_all) libscarc
	$(FCOMPL) $(FFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_all) $(LFLAGSMKL)
	#$(FCOMPL) $(FFLAGS) $(FOPENMPFLAGS) -o $(obj) $(obj_fds1) $(obj_fds2) $(LFLAGS) $(LFLAGSMKL)


# -----------------------------------------------------------------------------------------------------------------------
#  ScaRC Library
# -----------------------------------------------------------------------------------------------------------------------
libscarc: $(obj_scarc)
	rm -f libscarc.a
	ar cr libscarc.a $(obj_scarc) 
	ranlib libscarc.a


# -----------------------------------------------------------------------------------------------------------------------
# Object Dependencies 
# -----------------------------------------------------------------------------------------------------------------------

prec.o :
cons.o : prec.o
devc.o : prec.o
type.o : prec.o cons.o
data.o : prec.o func.o cons.o
rcal.o : func.o prec.o cons.o
mesh.o : prec.o type.o
func.o : prec.o cons.o type.o mesh.o devc.o
gsmv.o : prec.o func.o cons.o mesh.o
smvv.o : geom.o prec.o func.o
turb.o : prec.o func.o cons.o mesh.o
soot.o : prec.o mesh.o cons.o func.o turb.o
ieva.o : func.o prec.o cons.o type.o mesh.o
pois.o : prec.o cons.o
scarc_constants.o : prec.o cons.o 
scarc_types.o : prec.o cons.o scarc_constants.o geom.o
scarc_variables.o : prec.o cons.o scarc_constants.o scarc_types.o
scarc_pointers.o : prec.o cons.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o
scarc_messages.o : prec.o cons.o func.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_pointers.o
scarc_errors.o : cons.o func.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_messages.o
scarc_utilities.o : cons.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_pointers.o
scarc_storage.o : cons.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_errors.o scarc_pointers.o scarc_utilities.o
scarc_convergence.o : prec.o scarc_constants.o scarc_variables.o scarc_messages.o
scarc_timings.o : cons.o mesh.o func.o scarc_constants.o scarc_messages.o 
scarc_stack.o : cons.o mesh.o func.o scarc_constants.o scarc_variables.o scarc_messages.o scarc_storage.o scarc_convergence.o
scarc_setup.o : cons.o prec.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_errors.o scarc_stack.o scarc_methods.o
scarc_mpi.o : cons.o prec.o func.o scarc_constants.o scarc_variables.o scarc_messages.o scarc_errors.o scarc_stack.o
scarc_mkl.o : cons.o mesh.o func.o scarc_constants.o scarc_variables.o scarc_messages.o scarc_errors.o scarc_stack.o scarc_storage.o
scarc_vectors.o : cons.o prec.o func.o mesh.o scarc_constants.o scarc_types.o scarc_variables.o scarc_utilities.o scarc_messages.o scarc_timings.o scarc_mpi.o
scarc_grids.o : cons.o prec.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_messages.o scarc_timings.o scarc_errors.o scarc_storage.o scarc_mpi.o scarc_utilities.o
scarc_matrices.o : cons.o prec.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_utilities.o scarc_messages.o scarc_timings.o scarc_errors.o scarc_storage.o scarc_grids.o scarc_vectors.o
scarc_fft.o : cons.o prec.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_messages.o scarc_timings.o scarc_errors.o scarc_vectors.o scarc_matrices.o scarc_convergence.o
scarc_gmg.o : cons.o prec.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_utilities.o scarc_messages.o scarc_timings.o scarc_stack.o scarc_convergence.o scarc_vectors.o scarc_matrices.o
scarc_amg.o : cons.o mesh.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_utilities.o scarc_messages.o scarc_timings.o scarc_stack.o scarc_convergence.o scarc_vectors.o scarc_matrices.o
scarc_mgm.o : cons.o mesh.o mesh.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_utilities.o scarc_mpi.o scarc_storage.o scarc_convergence.o scarc_vectors.o scarc_matrices.o
scarc_methods.o : prec.o cons.o func.o scarc_constants.o scarc_types.o scarc_variables.o scarc_messages.o scarc_timings.o scarc_errors.o scarc_utilities.o scarc_stack.o scarc_vectors.o scarc_matrices.o scarc_convergence.o scarc_gmg.o scarc_amg.o scarc_mgm.o scarc_fft.o scarc_mkl.o
scarc_solvers.o : prec.o cons.o func.o scarc_constants.o scarc_errors.o scarc_timings.o scarc_mkl.o scarc_stack.o scarc_messages.o scarc_setup.o scarc_grids.o scarc_methods.o
evac.o : func.o prec.o cons.o type.o mesh.o ieva.o data.o
geom.o : gsmv.o func.o prec.o cons.o mesh.o turb.o
radi.o : func.o prec.o cons.o type.o mesh.o rcal.o geom.o
part.o : func.o prec.o cons.o type.o mesh.o devc.o data.o geom.o soot.o
vege.o : func.o prec.o cons.o type.o mesh.o geom.o
ctrl.o : prec.o cons.o type.o mesh.o func.o
samr.o : prec.o cons.o mesh.o turb.o
dump.o : func.o prec.o cons.o type.o mesh.o devc.o evac.o smvv.o turb.o scarc_solvers.o data.o radi.o soot.o geom.o
hvac.o : func.o prec.o cons.o type.o mesh.o ctrl.o
mass.o : func.o prec.o cons.o type.o mesh.o turb.o soot.o geom.o
read.o : func.o prec.o cons.o type.o mesh.o devc.o ctrl.o radi.o evac.o hvac.o scarc_solvers.o data.o geom.o mass.o soot.o
wall.o : func.o prec.o cons.o type.o mesh.o hvac.o mass.o soot.o geom.o
fire.o : func.o prec.o cons.o type.o mesh.o mass.o soot.o
divg.o : func.o prec.o cons.o type.o mesh.o scarc_solvers.o evac.o mass.o
velo.o : func.o prec.o cons.o type.o mesh.o turb.o geom.o scarc_solvers.o
pres.o : func.o prec.o cons.o type.o mesh.o pois.o velo.o scarc_solvers.o geom.o
init.o : func.o prec.o cons.o type.o mesh.o devc.o radi.o pois.o data.o evac.o pres.o geom.o
main.o : func.o prec.o cons.o type.o mesh.o devc.o smvv.o mass.o divg.o velo.o wall.o fire.o ieva.o radi.o evac.o part.o vege.o dump.o read.o init.o pres.o pois.o ctrl.o turb.o hvac.o scarc_solvers.o data.o geom.o soot.o



#*** Clean Target to remove Object and Module files ***


.PHONY : clean
clean:
	-rm -f *.o *.mod *.obj

.PHONY : winclean
winclean:
	-erase *.mod *.obj
